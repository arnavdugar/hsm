// Code generated by MockGen. DO NOT EDIT.
// Source: machine.go

// Package boundary is a generated GoMock package.
package boundary

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// OnEnterA mocks base method.
func (m *MockHandler) OnEnterA(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnEnterA", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnEnterA indicates an expected call of OnEnterA.
func (mr *MockHandlerMockRecorder) OnEnterA(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEnterA", reflect.TypeOf((*MockHandler)(nil).OnEnterA), ctx)
}

// OnEnterB mocks base method.
func (m *MockHandler) OnEnterB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnEnterB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnEnterB indicates an expected call of OnEnterB.
func (mr *MockHandlerMockRecorder) OnEnterB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEnterB", reflect.TypeOf((*MockHandler)(nil).OnEnterB), ctx)
}

// OnEnterC mocks base method.
func (m *MockHandler) OnEnterC(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnEnterC", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnEnterC indicates an expected call of OnEnterC.
func (mr *MockHandlerMockRecorder) OnEnterC(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEnterC", reflect.TypeOf((*MockHandler)(nil).OnEnterC), ctx)
}

// OnExitA mocks base method.
func (m *MockHandler) OnExitA(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnExitA", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnExitA indicates an expected call of OnExitA.
func (mr *MockHandlerMockRecorder) OnExitA(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnExitA", reflect.TypeOf((*MockHandler)(nil).OnExitA), ctx)
}

// OnExitB mocks base method.
func (m *MockHandler) OnExitB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnExitB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnExitB indicates an expected call of OnExitB.
func (mr *MockHandlerMockRecorder) OnExitB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnExitB", reflect.TypeOf((*MockHandler)(nil).OnExitB), ctx)
}

// OnExitC mocks base method.
func (m *MockHandler) OnExitC(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnExitC", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnExitC indicates an expected call of OnExitC.
func (mr *MockHandlerMockRecorder) OnExitC(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnExitC", reflect.TypeOf((*MockHandler)(nil).OnExitC), ctx)
}
