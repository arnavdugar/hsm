// Code generated by MockGen. DO NOT EDIT.
// Source: machine.go

// Package garagedoor is a generated GoMock package.
package garagedoor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// HandleButtonWhenClosing mocks base method.
func (m *MockHandler) HandleButtonWhenClosing() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleButtonWhenClosing")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleButtonWhenClosing indicates an expected call of HandleButtonWhenClosing.
func (mr *MockHandlerMockRecorder) HandleButtonWhenClosing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleButtonWhenClosing", reflect.TypeOf((*MockHandler)(nil).HandleButtonWhenClosing))
}

// HandleButtonWhenOpening mocks base method.
func (m *MockHandler) HandleButtonWhenOpening() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleButtonWhenOpening")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleButtonWhenOpening indicates an expected call of HandleButtonWhenOpening.
func (mr *MockHandlerMockRecorder) HandleButtonWhenOpening() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleButtonWhenOpening", reflect.TypeOf((*MockHandler)(nil).HandleButtonWhenOpening))
}

// HandleButtonWhenStoppedClosing mocks base method.
func (m *MockHandler) HandleButtonWhenStoppedClosing() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleButtonWhenStoppedClosing")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleButtonWhenStoppedClosing indicates an expected call of HandleButtonWhenStoppedClosing.
func (mr *MockHandlerMockRecorder) HandleButtonWhenStoppedClosing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleButtonWhenStoppedClosing", reflect.TypeOf((*MockHandler)(nil).HandleButtonWhenStoppedClosing))
}

// HandleButtonWhenStoppedOpening mocks base method.
func (m *MockHandler) HandleButtonWhenStoppedOpening() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleButtonWhenStoppedOpening")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleButtonWhenStoppedOpening indicates an expected call of HandleButtonWhenStoppedOpening.
func (mr *MockHandlerMockRecorder) HandleButtonWhenStoppedOpening() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleButtonWhenStoppedOpening", reflect.TypeOf((*MockHandler)(nil).HandleButtonWhenStoppedOpening))
}

// HandleClosed mocks base method.
func (m *MockHandler) HandleClosed() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleClosed")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleClosed indicates an expected call of HandleClosed.
func (mr *MockHandlerMockRecorder) HandleClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleClosed", reflect.TypeOf((*MockHandler)(nil).HandleClosed))
}

// HandleOpened mocks base method.
func (m *MockHandler) HandleOpened() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleOpened")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleOpened indicates an expected call of HandleOpened.
func (mr *MockHandlerMockRecorder) HandleOpened() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOpened", reflect.TypeOf((*MockHandler)(nil).HandleOpened))
}

// HandleSensor mocks base method.
func (m *MockHandler) HandleSensor() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSensor")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSensor indicates an expected call of HandleSensor.
func (mr *MockHandlerMockRecorder) HandleSensor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSensor", reflect.TypeOf((*MockHandler)(nil).HandleSensor))
}
